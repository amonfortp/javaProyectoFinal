-- MySQL Script generated by MySQL Workbench
-- lun 20 may 2019 20:12:26 CEST
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema bbddProyecto
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema bbddProyecto
-- -----------------------------------------------------
drop schema if exists `bbddProyecto`;
CREATE SCHEMA IF NOT EXISTS `bbddProyecto` DEFAULT CHARACTER SET utf8 ;
USE `bbddProyecto`;

DROP USER IF EXISTS 'amonfortp1'@'%';
CREATE USER 'amonfortp1'@'%';
GRANT ALL PRIVILEGES ON bbddProyecto.* TO 'amonfortp1'@'%' IDENTIFIED BY '1111';
GRANT all PRIVILEGES on mysql.proc TO 'amonfortp1'@'%' IDENTIFIED BY '1111';

-- -----------------------------------------------------
-- Table `bbddProyecto`.`Alumno`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bbddProyecto`.`Alumno` (
  `email` VARCHAR(45) NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `apellido1` VARCHAR(45) NOT NULL,
  `apellido2` VARCHAR(45),
  `password` BLOB NOT NULL,
  PRIMARY KEY (`email`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `bbddProyecto`.`Curso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bbddProyecto`.`Curso` (
  `curso` YEAR NOT NULL,
  PRIMARY KEY (`curso`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `bbddProyecto`.`Mensaje`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bbddProyecto`.`Mensaje` (
  `tipo` VARCHAR(45) NOT NULL,
  `mensaje` VARCHAR(150) NOT NULL,
  PRIMARY KEY (`tipo`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `bbddProyecto`.`Periodo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bbddProyecto`.`Periodo` (
  `idPeriodo` INT(11) NOT NULL AUTO_INCREMENT,
  `diaInicio` DATE NOT NULL,
  `diaFinal` DATE NOT NULL,
  `horaInicio` TIME NOT NULL,
  `horaFinal` TIME NOT NULL,
  `tiempo` TIME NOT NULL,
  `curso` YEAR NOT NULL,
  `habilitado` TINYINT(1) NOT NULL,
  PRIMARY KEY (`idPeriodo`),
  UNIQUE INDEX `diaInicio` (`diaInicio` ASC, `diaFinal` ASC, `horaInicio` ASC, `horaFinal` ASC, `curso` ASC),
  INDEX `fk_Periodo_1_idx` (`curso` ASC),
  CONSTRAINT `fk_Periodo_1`
    FOREIGN KEY (`curso`)
    REFERENCES `bbddProyecto`.`Curso` (`curso`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `bbddProyecto`.`Reserva`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bbddProyecto`.`Reserva` (
  `dia` DATE NOT NULL,
  `hora` TIME NOT NULL,
  `email` VARCHAR(45) NULL DEFAULT NULL,
  `idPeriodo` INT(11) NOT NULL,
  PRIMARY KEY (`dia`, `hora`),
  UNIQUE INDEX `dia` (`dia` ASC, `hora` ASC),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  INDEX `fk_Reserva_1_idx` (`idPeriodo` ASC),
  INDEX `fk_Reserva_2_idx` (`email` ASC),
  CONSTRAINT `fk_Reserva_1`
    FOREIGN KEY (`idPeriodo`)
    REFERENCES `bbddProyecto`.`Periodo` (`idPeriodo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Reserva_2`
    FOREIGN KEY (`email`)
    REFERENCES `bbddProyecto`.`Alumno` (`email`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

USE `bbddProyecto` ;

-- -----------------------------------------------------
-- procedure
-- -----------------------------------------------------

/*
DELIMITER @@
DROP PROCEDURE IF EXISTS crearAlumno @@
CREATE PROCEDURE crearAlumno(in email VARCHAR(45), in nombre VARCHAR(45), in apellidos VARCHAR(45), OUT login VARCHAR(45), OUT passw VARCHAR(45))
BEGIN

	DECLARE l VARCHAR(45);
    DECLARE p VARCHAR(45);

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		SHOW ERRORS LIMIT 1;      
		RESIGNAL;   
		ROLLBACK;
	END;
		
	START TRANSACTION;
		
        
		INSERT INTO Alumno VALUES (email, nombre, apellidos, l, p);

	COMMIT;
	
END@@

DELIMITER ;
*/


DELIMITER @@
DROP PROCEDURE IF EXISTS anularReserva @@
CREATE PROCEDURE anularReserva(in correo VARCHAR(45))
BEGIN

	DECLARE diaR DATE;
    DECLARE horaR TIME;
    
    

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		SHOW ERRORS LIMIT 1;      
		RESIGNAL;   
		ROLLBACK;
	END;
	
SELECT 
    dia, hora
INTO diaR , horaR FROM
    Reserva
WHERE
    email = correo;
    
	IF diaR = null
	THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'No tiene ninguna reserva', MYSQL_ERRNO = 1001;
	END IF;
	IF current_date() < adddate(diaR, interval 1 day) and current_time()<horaR
	THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'No se puede eliminar la reserva cuando quedan menos de 24h para el dia', MYSQL_ERRNO = 1002;
	END IF;
        
	START TRANSACTION;
		
		UPDATE Reserva 
		SET 
			email = NULL
		WHERE
			dia = diaR AND hora = horaR;
        
	COMMIT;
	
END@@

DELIMITER ;



DELIMITER @@
DROP PROCEDURE IF EXISTS reservar @@
CREATE PROCEDURE reservar(in correo varchar(45), in diaR DATE, in horaR TIME)
BEGIN

	DECLARE reser INT DEFAULT 0;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		SHOW ERRORS LIMIT 1;      
		RESIGNAL;   
		ROLLBACK;
	END;
		
	SELECT 
		COUNT(dia)
	INTO reser FROM
		Reserva
	WHERE
		email = correo;
		
	
		IF reser = 1
	THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ya hay una reserva', MYSQL_ERRNO = 1001;
	END IF;
    
    SET reser = 0;
    
	SELECT 
		count(dia)
	INTO reser FROM
		Reserva
	WHERE
		dia = diaR AND hora = horaR;
    
    IF reser = 0
    THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'No existe el dia para reservar', MYSQL_ERRNO = 1002;
    END IF;
    
	START TRANSACTION;
		
		UPDATE Reserva 
		SET 
			email = correo
		WHERE
			dia = diaR AND hora = horaR;

	COMMIT;
	
END@@

DELIMITER ;


DELIMITER @@
DROP PROCEDURE IF EXISTS crearPeriodo @@
CREATE PROCEDURE crearPeriodo(in diaInicio DATE, in diaFinal DATE, in horaInicio TIME, in horaFinal TIME, in tiempo TIME, in idCurso YEAR, in enabled TINYINT(1))
BEGIN
  
	DECLARE id INT;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      SHOW ERRORS LIMIT 1;      
      RESIGNAL;   
      ROLLBACK;
    END;
    
SELECT 
    IFNULL(MAX(idPeriodo), 0) + 1
INTO id FROM
    Periodo;
		
	IF diaInicio > diaFinal
	THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El dia inicial no puede ser mayor que el dia final', MYSQL_ERRNO = 1001;
	END IF; 
    IF horaInicio > horaFinal
    THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El hora inicial no puede ser mayor que la hora final', MYSQL_ERRNO = 1002;
	END IF; 
    IF diaInicio < Adddate(current_date(), INTERVAL 1 DAY)
    THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El dia y la hora inicial no puede ser menor que el actual', MYSQL_ERRNO = 1003;
	END IF; 
    IF tiempo <= '00:05:00'
    THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El tiempo debe ser mayor o igual a 5 minutos', MYSQL_ERRNO = 1005;
	END IF; 
    IF idCurso <= year(current_date())
    THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El curso no puede ser anterior al actual', MYSQL_ERRNO = 1006;
    END IF; 
		
	START TRANSACTION;

		INSERT INTO Periodo (idPeriodo,diaInicio, diaFinal, horaInicio, horaFinal, tiempo, curso, habilitado) VALUES (id,diaInicio, diaFinal, horaInicio, horaFinal, tiempo, idCurso, enabled);
		
		CALL crearReservas(id);           

	COMMIT;
	
END@@

DELIMITER ;

DELIMITER @@
DROP PROCEDURE IF EXISTS crearReservas @@
CREATE PROCEDURE crearReservas(in id INT)
BEGIN


	-- DECLARO VARIABLES
    DECLARE existePeriodo INT DEFAULT 0;
    DECLARE diaAux DATE;
    DECLARE diaFin DATE;
    DECLARE horaIni TIME;
    DECLARE horaFin TIME;
    DECLARE temp TIME;

	DECLARE i INT DEFAULT 0;
    DECLARE horaAux TIME;
    
	-- SELECT PARA DAR VALOR A LAS VARIABLES
SELECT 
    COUNT(idPeriodo),
    diaInicio,
    diaFinal,
    horaInicio,
    horaFinal,
    tiempo
INTO existePeriodo , diaAux , diaFin , horaIni , horaFin , temp FROM
    Periodo
WHERE
    idPeriodo = id;

SET horaAux = horaIni;
    
IF existePeriodo = 1
    THEN
    
    
    -- BUCLE PARA LOS DIAS DE LAS RESERVAS
        dia: LOOP
            IF ADDDATE(diaAux, INTERVAL i DAY) <= diaFin
            THEN
             -- BUCLE PARA LAS HORAS DE LAS RESERVAS
				 hora : LOOP
					 IF horaAux <= horaFin
					 THEN
					-- INSERTO LAS RESERVAS
						INSERT INTO Reserva (dia, hora, idPeriodo) VALUES (ADDDATE(diaAux, INTERVAL i DAY), horaAux, id);
                        SET horaAux = ADDTIME(horaAux, temp);
						ITERATE hora;
					END IF;
                    SET horaAux = horaIni;
				 LEAVE hora;
                 END LOOP hora;
                SET i = i + 1;
                ITERATE dia;
            END IF;
            LEAVE dia;
        END LOOP dia;
        
    END IF;

END@@

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


INSERT INTO Curso VALUES (2020);

CALL crearPeriodo('2020-05-12', '2020-05-15', '12:30:00', '15:30:00', '00:30:00', 2020, TRUE);

INSERT INTO Alumno VALUES ('amonfortp1@ieslavereda.es', 'Alejandro', 'Monfort', 'Parra', PASSWORD('1111'));

INSERT INTO Mensaje VALUES ('mensajeUsuarioCreado', 'Su usuario se a creado correctemente, su login y contraseña son: ');
INSERT INTO Mensaje VALUES ('mensajeReservado', 'Ha realizado una reserva, a continuación vera un documento que debera guardar como confirmación y tiene un plazo de 24h para eliminarla.');