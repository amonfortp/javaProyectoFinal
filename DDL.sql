-- MySQL Script generated by MySQL Workbench
-- lun 20 may 2019 20:12:26 CEST
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema bbddProyecto
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema bbddProyecto
-- -----------------------------------------------------
drop schema if exists `bbddProyecto`;
CREATE SCHEMA IF NOT EXISTS `bbddProyecto` DEFAULT CHARACTER SET utf8 ;
USE `bbddProyecto`;

DROP USER IF EXISTS 'amonfortp1'@'%';
CREATE USER 'amonfortp1'@'%';
GRANT ALL PRIVILEGES ON bbddProyecto.* TO 'amonfortp1'@'%' IDENTIFIED BY '1111';
GRANT all PRIVILEGES on mysql.proc TO 'amonfortp1'@'%' IDENTIFIED BY '1111';

-- -----------------------------------------------------
-- Table `bbddProyecto`.`Alumno`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bbddProyecto`.`Alumno` (
  `email` VARCHAR(45) NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `apellidos` VARCHAR(45) NOT NULL,
  `login` VARCHAR(45) NOT NULL,
  `password` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`email`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `bbddProyecto`.`Curso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bbddProyecto`.`Curso` (
  `curso` YEAR NOT NULL,
  PRIMARY KEY (`curso`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `bbddProyecto`.`Mensaje`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bbddProyecto`.`Mensaje` (
  `tipo` VARCHAR(45) NOT NULL,
  `mensaje` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`tipo`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `bbddProyecto`.`Periodo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bbddProyecto`.`Periodo` (
  `idPeriodo` INT(11) NOT NULL AUTO_INCREMENT,
  `diaInicio` DATE NOT NULL,
  `diaFinal` DATE NOT NULL,
  `horaInicio` TIME NOT NULL,
  `horaFinal` TIME NOT NULL,
  `tiempo` TIME NOT NULL,
  `curso` YEAR NOT NULL,
  PRIMARY KEY (`idPeriodo`),
  UNIQUE INDEX `diaInicio` (`diaInicio` ASC, `diaFinal` ASC, `horaInicio` ASC, `horaFinal` ASC, `curso` ASC),
  INDEX `fk_Periodo_1_idx` (`curso` ASC),
  CONSTRAINT `fk_Periodo_1`
    FOREIGN KEY (`curso`)
    REFERENCES `bbddProyecto`.`Curso` (`curso`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `bbddProyecto`.`Reserva`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bbddProyecto`.`Reserva` (
  `dia` DATE NOT NULL,
  `hora` TIME NOT NULL,
  `email` VARCHAR(45) NULL DEFAULT NULL,
  `idPeriodo` INT(11) NOT NULL,
  PRIMARY KEY (`dia`, `hora`),
  UNIQUE INDEX `dia` (`dia` ASC, `hora` ASC),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  INDEX `fk_Reserva_1_idx` (`idPeriodo` ASC),
  INDEX `fk_Reserva_2_idx` (`email` ASC),
  CONSTRAINT `fk_Reserva_1`
    FOREIGN KEY (`idPeriodo`)
    REFERENCES `bbddProyecto`.`Periodo` (`idPeriodo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Reserva_2`
    FOREIGN KEY (`email`)
    REFERENCES `bbddProyecto`.`Alumno` (`email`)
    ON DELETE SET NULL
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

USE `bbddProyecto` ;

-- -----------------------------------------------------
-- procedure
-- -----------------------------------------------------

/*
DELIMITER @@
DROP PROCEDURE IF EXISTS crearAlumno @@
CREATE PROCEDURE crearAlumno(in email VARCHAR(45), in nombre VARCHAR(45), in apellidos VARCHAR(45), OUT login VARCHAR(45), OUT passw VARCHAR(45))
BEGIN

	DECLARE l VARCHAR(45);
    DECLARE p VARCHAR(45);

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		SHOW ERRORS LIMIT 1;      
		RESIGNAL;   
		ROLLBACK;
	END;
		
	START TRANSACTION;
		
        
		INSERT INTO Alumno VALUES (email, nombre, apellidos, l, p);

	COMMIT;
	
END@@

DELIMITER ;
*/

DELIMITER @@
DROP PROCEDURE IF EXISTS crearPeriodo @@
CREATE PROCEDURE crearPeriodo(in diaInicio DATE, in diaFinal DATE, in horaInicio TIME, in horaFinal TIME, in tiempo TIME, in idCurso YEAR)
BEGIN
  
	DECLARE id INT;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
      SHOW ERRORS LIMIT 1;      
      RESIGNAL;   
      ROLLBACK;
    END;
    
    SELECT ifnull(MAX(idPeriodo),0)+1
	INTO id 
    FROM Periodo;
		
	IF diaInicio > diaFinal
	THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El dia inicial no puede ser mayor que el dia final', MYSQL_ERRNO = 1000;
	END IF; 
    IF horaInicio > horaFinal
    THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El hora inicial no puede ser mayor que la hora final', MYSQL_ERRNO = 1001;
	END IF; 
    IF diaInicio > current_date() and horaInicio > current_time()
    THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El dia y la hora inicial no puede ser menor que el actual', MYSQL_ERRNO = 1003;
	END IF; 
    IF tiempo >= '00:05:00'
    THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El tiempo debe ser mayor o igual a 5 minutos', MYSQL_ERRNO = 1004;
	END IF; 
    IF idCurso >= year(current_date())
    THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El tiempo debe ser mayor o igual a 5 minutos', MYSQL_ERRNO = 1005;
    END IF; 
		
	START TRANSACTION;

		INSERT INTO Periodo (idPeriodo,diaInicio, diaFinal, horaInicio, horaFinal, tiempo, curso) VALUES (id,diaInicio, diaFinal, horaInicio, horaFinal, tiempo, idCurso);
		
		CALL crearReservas(id);           

	COMMIT;
	
END@@

DELIMITER ;

DELIMITER @@
DROP PROCEDURE IF EXISTS crearReservas @@
CREATE PROCEDURE crearReservas(in id INT)
BEGIN


	-- DECLARO VARIABLES
    DECLARE existePeriodo INT DEFAULT 0;
    DECLARE diaAux DATE;
    DECLARE diaFin DATE;
    DECLARE horaIni TIME;
    DECLARE horaFin TIME;
    DECLARE temp TIME;

	DECLARE i INT DEFAULT 0;
    DECLARE horaAux TIME;
    
	-- SELECT PARA DAR VALOR A LAS VARIABLES
SELECT 
    COUNT(idPeriodo),
    diaInicio,
    diaFinal,
    horaInicio,
    horaFinal,
    tiempo
INTO existePeriodo , diaAux , diaFin , horaIni , horaFin , temp FROM
    Periodo
WHERE
    idPeriodo = id;

SET horaAux = horaIni;
    
IF existePeriodo = 1
    THEN
    
    
    -- BUCLE PARA LOS DIAS DE LAS RESERVAS
        dia: LOOP
            IF ADDDATE(diaAux, INTERVAL i DAY) <= diaFin
            THEN
             -- BUCLE PARA LAS HORAS DE LAS RESERVAS
				 hora : LOOP
					 IF horaAux <= horaFin
					 THEN
					-- INSERTO LAS RESERVAS
						INSERT INTO Reserva (dia, hora, idPeriodo) VALUES (ADDDATE(diaAux, INTERVAL i DAY), horaAux, id);
                        SET horaAux = ADDTIME(horaAux, temp);
						ITERATE hora;
					END IF;
                    SET horaAux = horaIni;
				 LEAVE hora;
                 END LOOP hora;
                SET i = i + 1;
                ITERATE dia;
            END IF;
            LEAVE dia;
        END LOOP dia;
        
    END IF;

END@@

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


